// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// model Test{
//     id String @id @default(auto()) @map("_id") @db.ObjectId
//     name String
//     desc String?
//     age Int
//     isPublished Boolean

// }

model User {
  userId    String  @id @map("_id")
  username  String  @unique
  avatar    String?
  cover     String?
  name      String?
  surname   String?
  desc      String?
  city      String?
  school    String?
  work      String?
  website   String?
  createdAt DateTime @default(now())
  posts     Post[]
  likes     Like[]
  comments  Comment[]
  followers Follower[] @relation("UserFollowers")
  followings Follower[] @relation("UserFollowing")
  sender    FollowRequest[] @relation("FollowRequestSent")
  receiver  FollowRequest[] @relation("FollowRequestReceived")
  blocker   Block[] @relation("BlockSent")
  blockedBy Block[] @relation("BlockReceived")
  stories   Story[]
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  desc      String
  img       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId    String
  likes     Like[]
  comments  Comment[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  desc      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  post      Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  postId    String @db.ObjectId
  likes     Like[]
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  user      User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId    String
  post      Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  postId    String? @db.ObjectId
  commentId String? @db.ObjectId
}

model Follower {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  follower  User @relation("UserFollowers", fields: [followerId], references: [userId], onDelete: Cascade)
  followerId String
  following User @relation("UserFollowing", fields: [followingId], references: [userId], onDelete: Cascade)
  followingId String
}

model FollowRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  sender    User @relation("FollowRequestSent", fields: [senderId], references: [userId], onDelete: Cascade)
  senderId  String
  receiver  User @relation("FollowRequestReceived", fields: [receiverId], references: [userId], onDelete: Cascade)
  receiverId String

  @@unique([senderId, receiverId])
}

model Block {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  blocker   User @relation("BlockSent", fields: [blockerId], references: [userId], onDelete: Cascade)
  blockerId String
  blocked   User @relation("BlockReceived", fields: [blockedId], references: [userId], onDelete: Cascade)
  blockedId String

  @@unique([blockerId, blockedId])
}

model Story {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId    String @unique
  img       String
}
