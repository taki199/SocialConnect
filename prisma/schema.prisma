// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// model Test{
//     id String @id @default(auto()) @map("_id") @db.ObjectId
//     name String
//     desc String?
//     age Int
//     isPublished Boolean

// }

model User {
  id        String  @id  @map("_id") @db.ObjectId
  username String @unique
  avatar String?
  cover String?
  name String?
  surname String?
  desc String?
  city String?
  school String?
  work String?
  website String?
  createdAt DateTime @default(now())
  posts Post[]
  likes Like[]
  comments Comment[]
  followers Follower[] @relation("UserFollowers")
  followings Follower[] @relation("UserFollowing")
  sender FollowRequest[] @relation("FollowRequestSent")
  receiver FollowRequest[] @relation("FollowRequestReceived")
  blocker Block[] @relation("BlockSent")
  blockedBy Block[] @relation("BlockReceived")
  stories Story[] 

}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  desc      String
  img       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId],references: [id],onDelete:Cascade)
  userId String @db.ObjectId
  likes Like[]
  comments Comment[]
}
model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  desc      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId],references: [id],onDelete:Cascade)
  post Post @relation(fields: [postId],references: [id],onDelete:Cascade)
  userId String @db.ObjectId
  postId String @db.ObjectId
  likes Like[]
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  user User @relation(fields: [userId],references: [id],onDelete:Cascade)
  userId String @db.ObjectId
  post Post? @relation(fields: [postId],references: [id],onDelete:Cascade)
  comment Comment? @relation(fields: [commentId],references: [id],onDelete:Cascade)
  postId String? @db.ObjectId
  commentId String? @db.ObjectId


  
}

model Follower{
   id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
   follower User @relation("UserFollowers",fields: [followerId],references: [id],onDelete:Cascade)
  followerId String @db.ObjectId
   following User @relation("UserFollowing",fields: [followingId],references: [id],onDelete:Cascade)
  followingId String @db.ObjectId
}

model FollowRequest{
   id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  sender User @relation("FollowRequestSent",fields: [senderId],references: [id],onDelete:Cascade)
  senderId String @db.ObjectId
   receiver User @relation("FollowRequestReceived",fields: [receiverId],references: [id],onDelete:Cascade)
  receiverId String @db.ObjectId

  @@unique([senderId,receiverId])
}

model Block{
   id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  blocker User @relation("BlockSent",fields: [blockerId],references: [id],onDelete:Cascade)
  blockerId String @db.ObjectId
  blocked User @relation("BlockReceived",fields: [blockedId],references: [id],onDelete:Cascade)
  blockedId String @db.ObjectId

  @@unique([blockerId,blockedId])
}

model Story{
   id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  expiresAt DateTime 
  user User @relation(fields:[userId],references: [id],onDelete:Cascade)
  userId String @db.ObjectId @unique
  img String
}

